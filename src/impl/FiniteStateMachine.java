package impl;

import exceptions.BadTableException;
import exceptions.BadInputException;
import exceptions.NDTransitionException;
import interfaces.IFiniteStateMachine;
import interfaces.ITransition;
import interfaces.ITransitionTable;

/**
 * Class representing a finite state machine.
 *
 */
public class FiniteStateMachine implements IFiniteStateMachine {

    private final ITransitionTable transitionTable;
    private int startState;
    private boolean validStart;

    /**
     * Adds the given transition to the FSM. The current_state of the first transition added to the FSM is treated as the initial state for the FSM.
     * @param transition the transition to add
     * @throws NDTransitionException when the finite state machine's transition table already contains another transition with the same current_state and input pair.
     */
    @Override
    public void addTransition(ITransition transition) throws NDTransitionException {
        if (transition == null) {
            throw new NDTransitionException();
        }
        if (this.validStart) {
            this.startState = transition.getCurrentState();
            this.validStart = false;
        }
        this.transitionTable.addTransition(transition);
    }

    /**
     * This runs the finite state machine, starting at its initial state and making transitions between states based on the given input sequence and barring any exceptions, finally returning the resulting output sequence.
     * @param input the input sequence/word to the FSM as a sequence of characters in a string
     * @return the output sequence/word generated by this FSM for the given input sequence
     * @throws BadTableException if the transition table (describing the FSM) contains transitions to illegal (i.e. non-existent) states or is missing one or more transitions from states for valid letters in the input alphabet.
     * @throws BadInputException if the given input sequence contains a character that is not an element of the input alphabet
     */
    @Override
    public String interpret(String input) throws BadTableException, BadInputException {
        if (this.transitionTable.hasMissingInputs() || this.transitionTable.hasTransitionsToIllegalStates()) {
            throw new BadTableException();
        }
        char[] inputString = input.toCharArray();
        int nextState = this.startState;
        String output = "";
        for (int i = 0; i < inputString.length; i++) {
            ITransition transition = this.transitionTable.getTransition(nextState, inputString[i]);
            output += transition.getOutput();
            nextState = transition.getNextState();
        }
        return output;
    }

    /**
     * Simple constructor method for FiniteStateMachine. Initializes the transition table and sets the
     * validStart boolean value to true. This value will be used to determine what the START_STATE will
     * equal.
     */
    public FiniteStateMachine() {
        this.transitionTable = new TransitionTable();
        this.validStart = true;
    }

}
